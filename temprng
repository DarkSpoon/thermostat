#!/usr/bin/python
import MySQLdb
import random
import time
import datetime

db = MySQLdb.connect(host="localhost", # your host, usually localhost
                     user="pi", # your username
                      passwd="raspberry", # your password
                      db="thermostat") # name of the data base

# you must create a Cursor object. It will let
#  you execute all the query you need
cur = db.cursor() 

while True:

# to be replaced with thermometer readings
###############################################################################################
	#Generate 10 temperatures 
	i=0
	while (i<10):
		genTemp=random.uniform(55,105)
		cur.execute("""UPDATE Temperatures SET Temp=%s WHERE PID=%s""",(genTemp,i))
		db.commit()
		i=i+1
		time.sleep(2)
###############################################################################################
	wiggle=2
	# pull generated temperatures from db
	cur.execute("SELECT * FROM Temperatures")

	# average all the temperture cells of all the rows
	sumTemp=0
	for row in cur.fetchall() :
		sumTemp=sumTemp+row[1]
	print sumTemp
	avgTemp=sumTemp/10.0
	
	# store averaged temperture into the Conditions table
	cur.execute("""UPDATE Conditions SET Temp=%s""",(avgTemp))
	db.commit()

	# read stored average, probably not necessary. look at removing
	cur.execute("SELECT * FROM Conditions")
	for row in cur.fetchall() :
		avgTemp=row[0]
		print (avgTemp)

	#Find target
	dow=time.strftime("%a")
	currentTime=time.strftime("%H:%M:%S")
	cur.execute("SELECT Target FROM Schedule WHERE DOW=%s AND %s BETWEEN Start AND Stop ",(dow, currentTime))
	#insert error handling for conflicting schedules, make php scheduling page check for overlap
	for row in cur.fetchall() :
		target=row[0]	

	#check for manual overrides
	#need to work on resetting manual temp at schedule change
	cur.execute("SELECT * FROM User_Req")
	for row in cur.fetchall() :
		userReqHeat=row[0]
		userReqAC=row[1]
		userReqFan=row[2]
		manualTemp=row[3]

	if manualTemp>0 :
		target=manualTemp

	print (target)
	cur.execute("UPDATE Conditions SET Target=%s",(target))
	db.commit()
	
	maxTemp = target+wiggle
	minTemp = target-wiggle

	#Check if user wants AC or Heat running and if fan is in Auto/On
	if avgTemp>=minTemp and avgTemp<=maxTemp :
		#Turn off Heat, AC, Fan unless Fan is set to Auto
		print ("we're perfect at", avgTemp)
		if userReqFan==0 :#Auto fan
			cur.execute("""UPDATE Conditions SET Heat=0, AC=0, Fan=0""")
			db.commit()
			cur.execute("""UPDATE User_Req SET Temp=0""")
			db.commit()
		else : #User wants fan on
			cur.execute("""UPDATE Conditions SET Heat=0, AC=0, Fan=1""")
			db.commit()
			cur.execute("""UPDATE User_Req SET Temp=0""")
			db.commit()

	#home is cooler than target
	elif avgTemp<minTemp :
		print ("Heat is needed. Too cold at", avgTemp)
		if userReqAC==1 : #we're cool enough, let house warm naturally
			if userReqFan==0 : #auto fan
				cur.execute("""UPDATE Conditions SET Heat=0, AC=0, Fan=0""")
				db.commit()
				cur.execute("""UPDATE User_Req SET Temp=0""")
				db.commit()
			else : #user wants fan on
				cur.execute("""UPDATE Conditions SET Heat=0, AC=0, Fan=1""")
				db.commit()
				cur.execute("""UPDATE User_Req SET Temp=0""")
				db.commit()
		elif userReqHeat==1 : #user wants home heated to target and we're too cold
			cur.execute("""UPDATE Conditions SET Heat=1, AC=0, Fan=1""")
			db.commit()
			#cur.execute("""UPDATE User_Req SET Temp=0""")
			#db.commit()
	#Home is warmer than target
	elif avgTemp>maxTemp :
		print ("AC is needed. Too hot at", avgTemp)
		if userReqAC==1 : #House is too warm, cool it
			cur.execute("""UPDATE Conditions SET Heat=0, AC=1, Fan=1""")
			db.commit()
			#cur.execute("""UPDATE User_Req SET Temp=0""")
			#db.commit()
		elif userReqHeat==1 : #we're warm enough, let house cool naturally
			if userReqFan==0 : #auto fan
				cur.execute("""UPDATE Conditions SET Heat=0, AC=0, Fan=0""")
				db.commit()
				cur.execute("""UPDATE User_Req SET Temp=0""")
				db.commit()
			else : #user wants fan on
				cur.execute("""UPDATE Conditions SET Heat=0, AC=0, Fan=1""")
				db.commit()
				cur.execute("""UPDATE User_Req SET Temp=0""")
				db.commit()