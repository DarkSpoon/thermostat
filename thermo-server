#!/usr/bin/python
import MySQLdb
import random
import time
import datetime
import os
import glob
import RPi.GPIO as GPIO 

class HD44780:  
  
    def __init__(self, pin_rs=7, pin_e=8, pins_db=[25, 24, 23, 18]):  
  
        self.pin_rs=pin_rs  
        self.pin_e=pin_e  
        self.pins_db=pins_db  
  
        GPIO.setmode(GPIO.BCM)  
        GPIO.setup(self.pin_e, GPIO.OUT)  
        GPIO.setup(self.pin_rs, GPIO.OUT)  
        for pin in self.pins_db:  
            GPIO.setup(pin, GPIO.OUT)  
  
        self.clear()  
  
    def clear(self):  
        """ Blank / Reset LCD """  
  
        self.cmd(0x33) # $33 8-bit mode  
        self.cmd(0x32) # $32 8-bit mode  
        self.cmd(0x28) # $28 8-bit mode  
        self.cmd(0x0C) # $0C 8-bit mode  
        self.cmd(0x06) # $06 8-bit mode  
        self.cmd(0x01) # $01 8-bit mode  
  
    def cmd(self, bits, char_mode=False):  
        """ Send command to LCD """  
  
        time.sleep(0.001)  
        bits=bin(bits)[2:].zfill(8)  
  
        GPIO.output(self.pin_rs, char_mode)  
  
        for pin in self.pins_db:  
            GPIO.output(pin, False)  
  
        for i in range(4):  
            if bits[i] == "1":  
                GPIO.output(self.pins_db[::-1][i], True)  
  
        GPIO.output(self.pin_e, True)  
        GPIO.output(self.pin_e, False)  
  
        for pin in self.pins_db:  
            GPIO.output(pin, False)  
  
        for i in range(4,8):  
            if bits[i] == "1":  
                GPIO.output(self.pins_db[::-1][i-4], True)  
  
  
        GPIO.output(self.pin_e, True)  
        GPIO.output(self.pin_e, False)  
  
    def message(self, text):  
        """ Send string to LCD. Newline wraps to second line"""  
  
        for char in text:  
            if char == '\n':  
                self.cmd(0xC0) # next line  
            else:  
                self.cmd(ord(char),True)  

db = MySQLdb.connect(host="localhost", # your host, usually localhost
                     user="pi", # your username
                      passwd="raspberry", # your password
                      db="thermostat") # name of the data base

# you must create a Cursor object. It will let
#  you execute all the query you need
cur = db.cursor() 

#set up thermometer data
os.system('modprobe w1-gpio')
os.system('modprobe w1-therm')
 
base_dir = '/sys/bus/w1/devices/'
device_folder = glob.glob(base_dir + '10*')[0]
device_file = device_folder + '/w1_slave'

def read_temp_raw():
	f = open(device_file, 'r')
	lines = f.readlines()
	f.close()
	return lines
 
def read_temp():
	lines = read_temp_raw()
	while lines[0].strip()[-3:] != 'YES':
		time.sleep(0.2)
		lines = read_temp_raw()
	equals_pos = lines[1].find('t=')
	if equals_pos != -1:
		temp_string = lines[1][equals_pos+2:]
		temp_c = float(temp_string) / 1000.0
		temp_f = temp_c * 9.0 / 5.0 + 32.0
		return temp_f

lcd = HD44780() 

while True:
	#lcd = HD44780() 
	#grab 10 temperatures 
	i=0
	while (i<10):
		#genTemp=random.uniform(55,105)
		temp=read_temp()
		print (temp)
		cur.execute("""UPDATE Temperatures SET Temp=%s WHERE PID=%s""",(temp,i))
		db.commit()
		i=i+1
		time.sleep(2)

	wiggle=2
	# pull generated temperatures from db
	cur.execute("SELECT * FROM Temperatures")

	# average all the temperture cells of all the rows
	sumTemp=0
	for row in cur.fetchall() :
		sumTemp=sumTemp+row[1]
	print sumTemp
	avgTemp=sumTemp/10.0
	
	# store averaged temperture into the Conditions table
	cur.execute("""UPDATE Conditions SET Temp=%s""",(avgTemp))
	db.commit()

	# read stored average, probably not necessary. look at removing
	#cur.execute("SELECT * FROM Conditions")
	#for row in cur.fetchall() :
	#	avgTemp=row[0]
	print (avgTemp)

	#Find target
	#dow=time.strftime("%a")#as three letter
	dow=time.strftime("%w")#as int starting sun=0
	currentTime=time.strftime("%H:%M:%S")
	cur.execute("SELECT Target FROM Schedule WHERE DOW=%s AND %s BETWEEN Start AND Stop ",(dow, currentTime))
	#insert error handling for conflicting schedules, make php scheduling page check for overlap
	for row in cur.fetchall() :
		target=row[0]

	#check for manual overrides
	#need to work on resetting manual temp at schedule change. 
	#For now, once we hit the manual temp we go back to scheduling. This is not optimal but easy.
	cur.execute("SELECT * FROM User_Req")
	for row in cur.fetchall() :
		userReqHeat=row[0]
		userReqAC=row[1]
		userReqFan=row[2]
		manualTemp=row[3]

	if manualTemp>0 :
		target=manualTemp

	print (target)

	cur.execute("UPDATE Conditions SET Target=%s",(target))
	db.commit()
	
	maxTemp = target+wiggle
	minTemp = target-wiggle

	#Check if user wants AC or Heat running and if fan is in Auto/On
	#Once min or max is hit, if there is a manual override temp in place, go back to schedule temps.
	if userReqAC :#Keep house cool
		if avgTemp<=minTemp :#hit min, let house warm naturally
			if userReqFan==0 :#Auto fan
				cur.execute("""UPDATE Conditions SET Heat=0, AC=0, Fan=0""")#turn all devices off
				db.commit()
			else : #User wants fan on
				cur.execute("""UPDATE Conditions SET Heat=0, AC=0, Fan=1""")#turn all devices off except fan
				db.commit()
			if manualTemp>0 :
				cur.execute("""UPDATE User_Req SET Temp=0""")#reset manual temp
				db.commit()
		elif avgTemp>maxTemp : #continue cooling house to min temp
			cur.execute("""UPDATE Conditions SET Heat=0, AC=1, Fan=1""")#AC and Fan on
			db.commit()	

	elif userReqHeat : #keep house warm
		if avgTemp>=minTemp :#hit max, let house cool naturally
			if userReqFan==0 :#Auto fan
				cur.execute("""UPDATE Conditions SET Heat=0, AC=0, Fan=0""")#turn all devices off
				db.commit()
			else : #User wants fan on
				cur.execute("""UPDATE Conditions SET Heat=0, AC=0, Fan=1""")#turn all devices off except fan
				db.commit()
			if manualTemp>0 :
				cur.execute("""UPDATE User_Req SET Temp=0""")#reset manual temp
				db.commit()
		elif avgTemp<minTemp : #warm the house to max temp
			cur.execute("""UPDATE Conditions SET Heat=1, AC=0, Fan=1""")#Heat and Fan on
			db.commit()
	else : #System off
		if userReqFan==0 :#Auto fan
			cur.execute("""UPDATE Conditions SET Heat=0, AC=0, Fan=0""")#turn all devices off
			db.commit()
		else : #User wants fan on
			cur.execute("""UPDATE Conditions SET Heat=0, AC=0, Fan=1""")#turn all devices except fan
			db.commit()
	cur.execute("SELECT * FROM Conditions")
	db.commit()

	for row in cur.fetchall() :
		if userReqAC==1 :
			if row[3]==1 :
				if userReqFan==0 :
					output=(" "+str("%.1f" % row[0])+"F Cooling\n"+str(row[1])+"F cool, auto")
					#print (output)
					lcd.clear()
					lcd.message(output)
				else :
					output=(" "+str("%.1f" % row[0])+"F Cooling\n"+str(row[1])+"F cool, on")
					#print (output)
					lcd.clear()
					lcd.message(output)
			else :
				if userReqFan==0 :
					output=(" "+str("%.1f" % row[0])+"F Idle\n"+str(row[1])+"F cool, auto")
					#print (output)
					lcd.clear()
					lcd.message(output)
				else :
					output=(" " +str("%.1f" % row[0])+"F Idle\n"+str(row[1])+"F cool, on")
					#print (output)
					lcd.clear()
					lcd.message(output)
		elif userReqHeat==1 :
			if row[5]==1 :
				if userReqFan==0 :
					output=(" "+str("%.1f" % row[0])+"F Heating\n"+str(row[1])+"F heat, auto") 
					#print (output)
					lcd.clear()
					lcd.message(output)
				else :
					output=(" "+str("%.1f" % row[0])+"F Heating\n"+str(row[1])+"F heat, on")
					#print (output)
					lcd.clear()
					lcd.message(output)
			else :
				if userReqFan==0 :
					output=(" "+str("%.1f" % row[0])+"F Idle\n"+str(row[1])+"F heat, auto") 
					#print (output)
					lcd.clear()
					lcd.message(output)
				else :
					output=("  "+str("%.1f" % row[0])+"%sF Idle\n"+str(row[1])+"F heat, on")
					#print (output)
					lcd.clear()
					lcd.message(output)
		else :
			if userReqFan==0 :
				output=(" "+str("%.1f" % row[0])+"F Idle\n"+str(row[1])+"F off, auto") 
				#print (output)
				lcd.clear()
				lcd.message(output)
			else :
				output=(" "+str("%.1f" % row[0])+"F Idle\n"+str(row[1])+"F off, on")
				#print (output)
				lcd.clear()
				lcd.message(output)
		